# **********************************************************************
#
# Copyright (c) 2010-2014 Bernard Luo. All rights reserved.
#
# <Email: luo (dot) xiaowei (at) hotmail (dot) com>
#
# **********************************************************************

#
# Select an installation base directory. The directory will be created
# if it does not exist.
#
prefix			?= /opt/Threading-$(VERSION)

#
# The "root directory" for runpath embedded in executables. Can be unset
# to avoid adding a runpath to Ice executables.
#
embedded_runpath_prefix ?= /opt/Threading-$(VERSION_MAJOR).$(VERSION_MINOR)

#
# Define create_runpath_symlink as yes if you would like 'make install'
# to automatically create a symbolic link for the embedded runpath
# directory. Only applies if embedded_runpath_prefix is also set.
#
create_runpath_symlink	?= no

#
# Define OPTIMIZE as yes if you want to build with
# optimization. Otherwise Ice is build with debug information.
#
#OPTIMIZE		= yes

#
# The build architectures for gcc/llvm based builds. The format of
# these build flags are OS dependent. For example, under OS X to
# build binaries which support both i386 and x86_64 you would use
# "-arch i386 -arch x86_64".  The default is OS version dependent. Be
# aware that this value may conflict with the setting of LP64 above.
#
#CXXARCHFLAGS		     = -arch i386 -arch x86_64

#
# If libiconv is not installed in a standard location where the compiler 
# can find it, set ICONV_HOME to the libiconv installation directory.
#
#ICONV_HOME		?= /opt/libiconv

#
# Default Mutex protocol: one of PrioNone or PrioInherit.
#
#DEFAULT_MUTEX_PROTOCOL  ?= PrioNone

#
# Define CPP11 as yes if you want to enable C++11 features in GCC or 
# Clang.
#
#CPP11     ?= yes

# ----------------------------------------------------------------------
# Don't change anything below this line!
# ----------------------------------------------------------------------

#
# Common definitions
#
ifeq ($(shell test -f $(top_srcdir)/config/Make.common.rules && echo 0),0)
    include $(top_srcdir)/config/Make.common.rules
else
    include $(top_srcdir)/../config/Make.common.rules
endif

bindir			= $(top_srcdir)/bin
libdir			= $(top_srcdir)/lib
headerdir		= $(top_srcdir)/include
includedir		= $(top_srcdir)/include

#
# Platform specific definitions
#
#include	 $(top_srcdir)/config/Make.rules.$(UNAME)
include	 $(top_srcdir)/config/Make.rules.Linux

install_includedir	:= $(prefix)/include
install_docdir		:= $(prefix)/doc
install_bindir	  	:= $(prefix)/$(binsubdir)$(cpp11suffix)
install_libdir	  	:= $(prefix)/$(libsubdir)$(cpp11suffix)
install_configdir 	:= $(prefix)/config

ifneq ($(prefix),/usr)
install_mandir		:= $(prefix)/man/man1
else
install_mandir		:= $(prefix)/share/man/man1
endif

ifneq ($(embedded_runpath_prefix),)
    runpath_libdir	:= $(embedded_runpath_prefix)/$(libsubdir)
else
    create_runpath_symlink = no
endif

ifeq ($(DEFAULT_MUTEX_PROTOCOL), PrioInherit)
    UTIL_FLAGS           = -DMUTEX_PRIO_INHERIT
endif


ifeq ($(ICONV_LIBS),)
    ICONV_LIBS          = $(if $(ICONV_HOME),-L$(ICONV_HOME)/$(libsubdir)) $(ICONV_LIB)
endif

EXPAT_FLAGS             = $(if $(EXPAT_HOME),-I$(EXPAT_HOME)/include)
ifeq ($(EXPAT_LIBS),)
    EXPAT_LIBS          = $(if $(EXPAT_HOME),-L$(EXPAT_HOME)/$(libsubdir)) -lexpat
endif
EXPAT_RPATH_LINK        = $(if $(EXPAT_HOME),$(call rpathlink,$(EXPAT_HOME)/$(libsubdir)))

CPPFLAGS	+= -I$(includedir)
LDFLAGS		= $(LDPLATFORMFLAGS) $(CXXFLAGS) -L$(libdir)

ifeq ($(FLEX_NOLINE),yes)
    FLEXFLAGS	       := -L
else
    FLEXFLAGS	       :=
endif

ifeq ($(mkshlib),)
    #$(error You need to define mkshlib in Make.rules.$(UNAME)) 
    $(error You need to define mkshlib in Make.rules.Linux
endif

ifeq ($(mktestname),)
    mktestname	= $(1)$(EXE_EXT)
endif

ifeq ($(mktest),)
    mktest 	  = $(CXX) $(LDFLAGS) -o $(@) $(2) $(3)
endif

EVERYTHING		= all depend clean install
EVERYTHING_EXCEPT_ALL   = depend clean install

.SUFFIXES:
.SUFFIXES:		.cpp .c .o

.cpp.o:
	$(CXX) -c $(CPPFLAGS) $(CXXFLAGS) $<

.c.o:
	$(CC) -c $(CPPFLAGS) $(CFLAGS) $<

all:: $(SRCS) $(TARGETS)

depend:: $(SRCS)
	-rm -f .depend .depend.mak
	if test -n "$(SRCS)" ; then \
		$(CXX) -DMAKEDEPEND -M $(CXXFLAGS) $(CPPFLAGS) $(SRCS) | python $(top_srcdir)/config/makedepend.py; \
	fi

clean::
	-rm -f $(TARGETS)
	-rm -f core *.o *.bak

ifneq ($(TEMPLATE_REPOSITORY),)
clean::
	rm -fr $(TEMPLATE_REPOSITORY)
endif

install::
